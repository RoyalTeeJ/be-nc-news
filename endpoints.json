{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "Footie!" }]
    }
  },
  "GET /api/articles": {
    "description": "serves an array of all articles",
    "queries": ["author", "topic", "sort_by", "order"],
    "exampleResponse": {
      "articles": [
        {
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "body": "Text from the article..",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0,
          "comment_count": 6
        }
      ]
    }
  },
  "GET /api/articles?:withQueries": {
    "description": "Fetches all articles, with optional sorting by column and order.",
    "methods": "GET",
    "query_params": {
      "topic": "string (can be football, cooking or coding)",
      "sort_by": "string (can be article_id, title, author, topic, created_at, votes, defaults to created_at)",
      "order": "string (can be 'asc' or 'desc', defaults to 'desc')"
    },
    "response": {
      "status": 200,
      "body": [
        {
          "article_id": "number",
          "title": "string",
          "author": "string",
          "topic": "string",
          "created_at": "date",
          "votes": "number",
          "article_img_url": "string",
          "comment_count": "number"
        }
      ]
    }
  },
  "GET /api/articles/:article_id": {
    "description": "Gets a specific article by its ID.",
    "method": "GET",
    "queries": 1,
    "example_response": {
      "article_id": 1,
      "title": "Running a Node App",
      "author": "jessjelly",
      "body": "This is part two of a series on how to get up and running with Systemd and Node.js. This part dives deeper into how to successfully run your app with systemd long-term, and how to set it up in a production environment.",
      "topic": "coding",
      "created_at": "2020-11-07 06:03:00",
      "votes": 0,
      "article_img_url": "https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg?w=700&h=700"
    }
  },
  "GET /api/comments/:article_id/comments": {
    "description": "Returns an array of comments for a given article. The comments are sorted by created_at in descending order.",
    "methods": "GET",
    "queryParams": 1,
    "exampleRequest": "/api/articles/1/comments",
    "response": [
      {
        "comment_id": 5,
        "body": "I hate streaming noses",
        "article_id": 1,
        "author": "icellusedkars",
        "votes": 0,
        "created_at": "2020-11-03T21:00:00.000Z"
      },
      {
        "comment_id": 2,
        "body": "The beautiful thing about treasure is that it exists. Got to find out what kind of sheets these are; not cotton, not rayon, silky.",
        "article_id": 1,
        "author": "butter_bridge",
        "votes": 14,
        "created_at": "2020-10-31T03:03:00.000Z"
      }
    ]
  },
  "POST /api/comments/:article_id/comments": {
    "description": "Adds a new comment to a given article.",
    "methods": "POST",
    "requestBody": {
      "username": "string (required)",
      "body": "string (required)"
    },
    "exampleRequest": "/api/articles/1/comments",
    "exampleRequestBody": {
      "username": "butter_bridge",
      "body": "This is what i live for"
    },
    "response": {
      "comment_id": "number",
      "votes": "0",
      "created_at": "date",
      "author": "butter_bridge",
      "body": "This is what i live for",
      "article_id": "1"
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "Updates the votes of an article by its article_id.",
    "methods": "PATCH",
    "requestBody": {
      "inc_votes": "number (required)"
    },
    "exampleRequest": "/api/articles/1",
    "exampleRequestBody": {
      "inc_votes": 10
    },
    "response": {
      "article_id": 1,
      "title": "string",
      "body": "string",
      "topic": "string",
      "created_at": "date",
      "votes": 10,
      "article_img_url": "string"
    }
  },
  "DELETE /api/comments/:comment_id": {
    "description": "Deletes a comment identified by its comment_id.",
    "methods": "DELETE",
    "response": {
      "status": 204
    }
  },
  "GET /api/users": {
    "description": "Fetches all users.",
    "methods": "GET",
    "response": {
      "status": 200,
      "body": [
        {
          "username": "icellusedkars",
          "name": "sam",
          "avatar_url": "https://avatars2.githubusercontent.com/u/24604688?s=460&v=4"
        }
      ]
    }
  },
  "GET /api/users/:username": {
    "description": "Fetch a user by their username.",
    "methods": "GET",
    "response": {
      "user": {
        "username": "string",
        "avatar_url": "string",
        "name": "string"
      }
    }
  },
  "PATCH /api/comments/:comment_id": {
    "description": "Updates the votes for a specific comment by comment_id.",
    "methods": "PATCH",
    "requestBody": {
      "inc_votes": "number (required) - The number of votes to increase or decrease the comment's vote count."
    },
    "exampleRequest": "/api/comments/1",
    "exampleRequestBody": {
      "inc_votes": 5
    },
    "response": {
      "comment_id": 1,
      "body": "string",
      "article_id": "number",
      "author": "string",
      "votes": 5,
      "created_at": "date"
    }
  },
  "POST /api/articles": {
    "description": "Adds a new article to the database. If the article image URL is not provided, a default URL will be used. The response includes the newly added article with its ID, vote count, creation date, and initial comment count of 0.",
    "requestBody": {
      "author": "string (required)",
      "title": "string (required)",
      "body": "string (required)",
      "topic": "string (required)",
      "article_img_url": "string (optional, defaults to a default URL if not provided)"
    },
    "exampleRequestBody": {
      "author": "johndoe",
      "title": "A Great New Article",
      "body": "This is the content of the article.",
      "topic": "technology",
      "article_img_url": "https://images.pexels.com/photos/97050/pexels-photo-97050.jpeg?w=700&h=700"
    },
    "response": {
      "article_id": "number",
      "title": "string",
      "topic": "string",
      "author": "string",
      "body": "string",
      "article_img_url": "string",
      "votes": "number",
      "created_at": "date",
      "comment_count": "number"
    }
  }
}
